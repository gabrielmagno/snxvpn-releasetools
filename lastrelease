#!/usr/bin/python

import sys
import re
import os
from datetime import datetime
from optparse import OptionParser

tag_re   = 'tags/((release|V)_[^_]*_?([0-9]+_[0-9]+))'
trunk_re = 'trunk'

def get_popen (cmd) :
    """ return stripped stdout from external command """
    fd  = os.popen (cmd)
    ret = fd.read ().strip ()
    fd.close ()
    return ret
# end def get_popen

class VC (object) :
    """ Convention: A revision is name_X_Y where name is the released
        revision and X and Y are major an minor number.
    """

    def __init__ (self, name = None, do_notag = True) :
        self.name     = name
        self.do_notag = do_notag
        self.annotate = ''
        if self.do_notag :
            self.annotate = 'NO_TAG_'
    # end def __init__

# end class VC


class SVN (VC) :

    def commit_date (self) :
        line = get_popen ("svn info | grep '^Last Changed Date:'")
        d, t = line.split (':', 1) [1].split (' ') [1:3]
        dt = datetime.strptime (' '.join ((d, t)), '%Y-%m-%d %H:%M:%S')
        return dt
    # end def commit_date

    def up_to_date_rev (self) :
        url        = get_popen ("svn info | grep '^URL'")
        rev        = get_popen ("svnversion -c .").rstrip ("S")
        rev        = rev.split (':') [-1]
        suffix     = '$'
        if self.name :
            suffix = '/%s$' % self.name
        tag_rgx    = re.compile (tag_re   + suffix)
        trunk_rgx  = re.compile (trunk_re + suffix)
        m   = tag_rgx.search (url)
        if m :
            if rev.endswith ("M") :
                return "%s%s:%s" % (self.annotate, m.group (1), rev)
            return "V_%s_%s" % (m.group (3), rev)
        m   = trunk_rgx.search (url)
        if m :
            return "%s%s" % (self.annotate, rev)
        return "NO_TAG"
    # end def up_to_date_rev

# end class SVN

class GIT (VC) :
    """ For git we ignore the notag option when there are earlier tags
        as git has a better way to express derivation from the last
        tagged version. The case that no name is given is the default
        with git, so we have tags of the form V_X_Y where X and Y are
        the version numbers.
    """

    def commit_date (self) :
        line = get_popen ('git log -n 1 | grep "^Date:"')
        d    = line.split (':', 1) [1].strip ()
        assert (d.endswith ('+0200'))
        d    = d.rsplit (None, 1) [0]
        dt   = datetime.strptime (d, '%a %b %d %H:%M:%S %Y')
        return dt
    # end def commit_date

    def up_to_date_rev (self) :
        """ We find the first version on the *first* parent tree.
            This excludes versions on a different tree resulting from a
            merge. For discussion see
            http://www.xerxesb.com/2010/git-describe-and-the-tale-of-the-wrong-commits/
        """
        name = self.name or 'V'
        prg  = []
        prg.append ('git log --oneline --decorate=short --first-parent')
        prg.append ('egrep "tag: (%s)" 2> /dev/null' % name)
        prg.append ('head -n1')
        line = get_popen (' | '.join (prg))
        rgx  = re.compile (r"tag:\s+(%s[^ )]*)" % name)
        m    = rgx.search (line)
        if not m :
            line = get_popen ('git log -n1 | grep "^commit"').strip ()
            return self.annotate + line.split (None, 1) [1]
        line = get_popen \
            ('git describe --tags --dirty=-modified --match="%s"' % m.group (1))
        return line.strip ()
    # end def up_to_date_rev

# end class GIT

if __name__ == "__main__" :
    usage  = "%prog [-n --no-notag] [project-name]"
    parser = OptionParser (usage = usage)
    parser.add_option \
        ( "-n", "--no-notag"
        , dest    = "do_notag"
        , help    = '''Don't use "NO_TAG" if not an svn tag'''
        , default = True
        , action  = "store_false"
        )
    parser.add_option \
        ( "-d", "--date"
        , dest    = "date"
        , help    = "Output date of last commit"
        , default = False
        , action  = "store_true"
        )
    parser.add_option \
        ( "-t", "--tex-format"
        , dest    = "tex_format"
        , help    = "Output tag and date of last commit in TeX format"
        , default = False
        , action  = "store_true"
        )
    (options, args) = parser.parse_args ()
    if len (args) > 1 :
        parser.print_help (sys.stderr)
        sys.exit (23)
    mode = None
    try :
        mode = os.stat ('.git')
    except OSError :
        pass
    project = ''
    if len (args) == 1 :
        project = args [0]
    if mode :
        vc = GIT (project, options.do_notag)
    else :
        vc = SVN (project, options.do_notag)
    if options.tex_format :
        r = vc.up_to_date_rev ()
        if r.endswith ('M') :
            r = r.replace ('M', ' (modified)')
        r = r.replace ('_', '-')
        print "\\renewcommand{\\revision}{V.%s }" % r
        d = vc.commit_date ()
        print d.strftime ("\\def\\runtuxdate{\\formatdate{%d}{%m}{%Y}}")
    elif options.date :
        print vc.commit_date ().strftime ('%Y-%m-%d')
    else :
        print vc.up_to_date_rev ()
